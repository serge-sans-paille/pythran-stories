<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pythran stories - release</title><link href="http://serge-sans-paille.github.io/pythran-stories/" rel="alternate"></link><link href="http://serge-sans-paille.github.io/pythran-stories/feeds/release.atom.xml" rel="self"></link><id>http://serge-sans-paille.github.io/pythran-stories/</id><updated>2020-09-23T00:00:00+02:00</updated><entry><title>Pythran 0.9.7 - memes tra</title><link href="http://serge-sans-paille.github.io/pythran-stories/pythran-097-memes-tra.html" rel="alternate"></link><published>2020-09-23T00:00:00+02:00</published><updated>2020-09-23T00:00:00+02:00</updated><author><name>serge-sans-paille</name></author><id>tag:serge-sans-paille.github.io,2020-09-23:/pythran-stories/pythran-097-memes-tra.html</id><summary type="html">&lt;p class="first last"&gt;Pythran version bump, supporting Python 3.9, fixing a few performance issues and benchmarking
the release.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Fedora &lt;em&gt;rawhide&lt;/em&gt; has been moving to Python 3.9, which &lt;a class="reference external" href="https://bugzilla.redhat.com/show_bug.cgi?id=1818006"&gt;broke the Pythran package&lt;/a&gt;. This is unsurprising,
as Python 3.9 changes the &lt;a class="reference external" href="https://docs.python.org/3/library/ast.html"&gt;ast&lt;/a&gt;
representation, so &lt;a class="reference external" href="https://github.com/serge-sans-paille/gast"&gt;GAST&lt;/a&gt; and
&lt;a class="reference external" href="https://github.com/serge-sans-paille/beniget"&gt;Beniget&lt;/a&gt;, two packages &lt;em&gt;Pythran&lt;/em&gt;
depends on for the AST abstraction, needed to adapt.  As of &lt;em&gt;Pythran&lt;/em&gt; &lt;strong&gt;0.9.7&lt;/strong&gt;,
&lt;em&gt;GAST&lt;/em&gt; has moved to &lt;strong&gt;0.4.0&lt;/strong&gt; and &lt;em&gt;Beniget&lt;/em&gt; to &lt;strong&gt;0.3.0&lt;/strong&gt;, both support Python 3.9
and all these packages are now compatible. Good.&lt;/p&gt;
&lt;p&gt;With version 0.9.6, &lt;em&gt;Pythran&lt;/em&gt; introduced a new &lt;em&gt;NumPy&lt;/em&gt; expression computation engine
that solved a few issues but also introduced a performance regression for
various kernels. I've been working on fixing that aspect, and I'm quite happy
with the result, showcased in version 0.9.7.&lt;/p&gt;
&lt;p&gt;Performance is a critical aspect of &lt;em&gt;Pythran&lt;/em&gt;, so it comes as no surprise that the
expression evaluation engine got rewritten several times. To evaluate the
difference between versions 0.9.5 and 0.9.7, let's use the &lt;a class="reference external" href="https://github.com/serge-sans-paille/numpy-benchmarks/"&gt;NumPy-benchmarks&lt;/a&gt; project. It contains
a collection of high-level kernels, and was recently granted a few options to
ease comparison of performance across project versions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pythran&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.9.5
&lt;span class="gp"&gt;$ &lt;/span&gt;np-bench&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-tpythran&lt;span class="w"&gt; &lt;/span&gt;-p0.9.5-&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;095&lt;/span&gt;.log
&lt;span class="gp"&gt;$ &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pythran&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.9.7
&lt;span class="gp"&gt;$ &lt;/span&gt;np-bench&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-tpythran&lt;span class="w"&gt; &lt;/span&gt;-p0.9.7-&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;097&lt;/span&gt;.log
&lt;span class="gp"&gt;$ &lt;/span&gt;np-bench&lt;span class="w"&gt; &lt;/span&gt;format&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;095&lt;/span&gt;.log&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;097&lt;/span&gt;.log&lt;span class="w"&gt; &lt;/span&gt;-tsvg&lt;span class="w"&gt; &lt;/span&gt;--logscale&lt;span class="w"&gt; &lt;/span&gt;--normalize&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.9.5-pythran
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result is:&lt;/p&gt;
&lt;object data="./images/2020-09-23-pythran-evolve.svg" type="image/svg+xml"&gt;&lt;/object&gt;
&lt;p&gt;There are quite a few things to tell on that comparison: some benchmarks are in
much better shape (especially &lt;tt class="docutils literal"&gt;laplacien&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;wave&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;diffusion&lt;/tt&gt;) but
there's still room for improvement, as shown by &lt;tt class="docutils literal"&gt;grayscott&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;local_maxima&lt;/tt&gt;. The performance boost is due to the better expression engine,
so that's expected, but the slowdown still needs some investigation…&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;np-bench&lt;/span&gt;&lt;/tt&gt; script also makes it possible to compare &lt;em&gt;Pythran&lt;/em&gt; with &lt;em&gt;CPython&lt;/em&gt;
or &lt;em&gt;Numba&lt;/em&gt;. Let's try that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-U&lt;span class="w"&gt; &lt;/span&gt;pythran&lt;span class="w"&gt; &lt;/span&gt;numba
&lt;span class="gp"&gt;$ &lt;/span&gt;np-bench&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-tpythran&lt;span class="w"&gt; &lt;/span&gt;-tnumba&lt;span class="w"&gt; &lt;/span&gt;-tpython&lt;span class="w"&gt; &lt;/span&gt;-oall.log
&lt;span class="gp"&gt;$ &lt;/span&gt;np-bench&lt;span class="w"&gt; &lt;/span&gt;format&lt;span class="w"&gt; &lt;/span&gt;all.log&lt;span class="w"&gt; &lt;/span&gt;-tsvg&lt;span class="w"&gt; &lt;/span&gt;--logscale&lt;span class="w"&gt; &lt;/span&gt;--normalize&lt;span class="o"&gt;=&lt;/span&gt;python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result is:&lt;/p&gt;
&lt;object data="./images/2020-09-23-pythran-all.svg" type="image/svg+xml"&gt;&lt;/object&gt;
&lt;p&gt;Interestingly, unoptimized Python is still ahead for a few benchmarks.
That wasn't the case a few years ago. If I recall correctly, that's due
to &lt;em&gt;NumPy&lt;/em&gt; now performing better, but that's just an educated guess…
Another subject that needs investigation :-).&lt;/p&gt;
&lt;p&gt;The kernels are mostly high-level ones, and that doesn't always match &lt;em&gt;Numba&lt;/em&gt;'s
requirements, which explains that it sometimes just gives up.&lt;/p&gt;
&lt;p&gt;Overall &lt;em&gt;Pythran&lt;/em&gt; performance is still satisfying, but we definitely need to
investigate why we lost performance compared to 0.9.5 in a few cases, and why we
don't manage to generate faster code for &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;periodic-dist&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;cronbach&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;That was a short post. The changelog is, as always, &lt;a class="reference external" href="https://pythran.readthedocs.io/en/latest/Changelog.html"&gt;available online&lt;/a&gt;, and if you're
interested in investigating the benchmarks, all the sources are available in
&lt;a class="reference external" href="https://github.com/serge-sans-paille/numpy-benchmarks/tree/master/numpy_benchmarks/benchmarks"&gt;the tree&lt;/a&gt;. Enjoy!&lt;/p&gt;
</content><category term="release"></category></entry><entry><title>Pythran 0.9.4 - Hollsent</title><link href="http://serge-sans-paille.github.io/pythran-stories/pythran-094-hollsent.html" rel="alternate"></link><published>2019-11-06T00:00:00+01:00</published><updated>2019-11-06T00:00:00+01:00</updated><author><name>serge-sans-paille</name></author><id>tag:serge-sans-paille.github.io,2019-11-06:/pythran-stories/pythran-094-hollsent.html</id><summary type="html">&lt;p class="first last"&gt;Pythran version bump, bringing a lot of unexpected features in!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Pythran 0.9.4 just got &lt;a class="reference external" href="https://github.com/serge-sans-paille/pythran/tree/0.9.4post0"&gt;released&lt;/a&gt;, and it has an
unusual number of unexpected features. Unexpected? Yes, that's the kind of
features I never thought Pythran would have, but they ended up being possible,
and even better, consistent with the whole picture. So let's take a deeper look!&lt;/p&gt;
&lt;p&gt;Before that, if you're just interested in the changes etc, please read &lt;a class="reference external" href="https://www.freelists.org/post/pythran/Pythran-094-Hollsent"&gt;the
announce on the mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="support-for-the-isinstance-builtin"&gt;
&lt;h2&gt;Support for the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;isinstance(...)&lt;/span&gt;&lt;/tt&gt; builtin&lt;/h2&gt;
&lt;p&gt;The following code is perfectly valid in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;abssqr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;real&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imag&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, it is not trivial to turn it into a statically compiled, generic
function because of the guard over &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;isinstance(...)&lt;/span&gt;&lt;/tt&gt;. This closely resembles a
feature of C++17, &lt;a class="reference external" href="https://en.cppreference.com/w/cpp/language/if"&gt;if constexpr&lt;/a&gt;, something supported by
Pythran (even though we're generating C++11 code in the back-end, but that's another
story). So it was just a small step forward to handle the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;isinstance(...)&lt;/span&gt;&lt;/tt&gt;
builtin. Icing on the cake: it's actually the same code transformation that we
already use to support &lt;tt class="docutils literal"&gt;is None&lt;/tt&gt;!&lt;/p&gt;
&lt;p&gt;Trivia: Pythran automatically detect a call to &lt;tt class="docutils literal"&gt;abs(x) ** 2&lt;/tt&gt; and replaces it
by a call to a Pythran builtin, optimized for the actual type of &lt;tt class="docutils literal"&gt;x&lt;/tt&gt;, so this
example is just... well... an example!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="support-the-type-builtin"&gt;
&lt;h2&gt;Support the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;type(...)&lt;/span&gt;&lt;/tt&gt; builtin&lt;/h2&gt;
&lt;p&gt;Typing is difficult, so I've always been reluctant to implement type-related
operators. Here is the implementation of the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;type(...)&lt;/span&gt;&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;pythonic&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;typename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;type_functor&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;tt class="docutils literal"&gt;type_functor&lt;/tt&gt; maintains a binding between types and functors capable of
building that type, as in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;type_functor&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;functor&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's some ugly internals of &lt;tt class="docutils literal"&gt;pythonic&lt;/tt&gt; but the interesting part is that all
the pieces fit together! &lt;em&gt;Gast&lt;/em&gt; do I love static polymorphism and modern C++!
Say hello to beautiful polymorphic code like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;poly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="clang-cl"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;clang-cl&lt;/span&gt;&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Native extension like the ones produced by Pythran are supposed to be compiled
using the Microsoft Visual Studio Compiler. That behavior is &lt;a class="reference external" href="https://github.com/python/cpython/blob/e42b705188271da108de42b55d9344642170aa2b/Lib/distutils/msvc9compiler.py#L384"&gt;hardcoded in
distutils&lt;/a&gt;.
Unfortunately, this compiler regularly fails to compile Pythran code that
compiles fine with GCC and Clang.&lt;/p&gt;
&lt;p&gt;The (relatively hacky, but so satisfying) answer I found out is to rely on
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;clang-cl.exe&lt;/span&gt;&lt;/tt&gt;, a binary shipped with the clang toolchain that mimics the &lt;tt class="docutils literal"&gt;cl.exe&lt;/tt&gt; Command Line
Interface. It requires some monkey patching in &lt;tt class="docutils literal"&gt;distutils&lt;/tt&gt;, but it's worth the
price: Pythran now seems to work nice in a MS environment. And according to
&lt;a class="reference external" href="https://ci.appveyor.com/project/serge-sans-paille/pythran/builds/28505845"&gt;AppVeyor&lt;/a&gt;, the generated module run just fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-3-8-support"&gt;
&lt;h2&gt;Python 3.8 support&lt;/h2&gt;
&lt;p&gt;Pythran uses an internal representation that closely resembles the Python AST,
but which is independent from it: it can represent both py2, py35, py36, py37
and now py38 code. That's all thank to this innocent package: &lt;a class="reference external" href="https://github.com/serge-sans-paille/gast"&gt;gast&lt;/a&gt; and not to forget its happy
companion &lt;a class="reference external" href="https://github.com/serge-sans-paille/beniget/"&gt;beniget&lt;/a&gt; which
provides use-def chains for Python.&lt;/p&gt;
&lt;p&gt;Fun fact: &lt;tt class="docutils literal"&gt;gast&lt;/tt&gt; is a relatively small
package but it's by far the most popular one I created, according to &lt;a class="reference external" href="https://pypistats.org/packages/gast"&gt;pypistats&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="release"></category></entry><entry><title>Pythran 0.9.1 is out!</title><link href="http://serge-sans-paille.github.io/pythran-stories/pythran-091-is-out.html" rel="alternate"></link><published>2019-01-20T00:00:00+01:00</published><updated>2019-01-20T00:00:00+01:00</updated><author><name>serge-sans-paille</name></author><id>tag:serge-sans-paille.github.io,2019-01-20:/pythran-stories/pythran-091-is-out.html</id><summary type="html">&lt;p class="first last"&gt;Pythran version bump, new PyPI packages + Conda release, Changelog and comments.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Hey folks, it's been a long time since I last did a post to celebrate a
release. Even if 0.9.1 is only a minor release, we're getting closer to an
important date, when Python 2 will no longer be officially supported.
Following &lt;a class="reference external" href="https://python3statement.org/"&gt;the move&lt;/a&gt; Pythran will stop
supporting Python2 by the end of the year. Of course, the last stable version
supporting Python2 will still be available at that movment, but only Python3
will receive updates. It's in one year, but you'll be warned!&lt;/p&gt;
&lt;div class="section" id="reminder"&gt;
&lt;h2&gt;Reminder&lt;/h2&gt;
&lt;p&gt;Pythran is an ahead-of-time compiler for numeric kernel. The whole idea is that you extract the high-level kernel you wrote using NumPy calls and high level abstractions into an independent module, then run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pythran&lt;span class="w"&gt; &lt;/span&gt;my_module.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And you end up with a native module that crunch numbers faster; For instance the following kernel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#from https://github.com/craffel/jax-tutorial/blob/master/you-don-t-know-jax.ipynb&lt;/span&gt;

&lt;span class="c1"&gt;#pythran export net((float64[:,:], float64[:], float64[:], float64), int64[:])&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="c1"&gt;# Sigmoid nonlinearity&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sigmoid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Computes our network&amp;#39;s output&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;net&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
    &lt;span class="n"&gt;hidden&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tanh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sigmoid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Runs twice as fast when compiled with Pythran, with as much effort as a single extra line that describes the parameters of the top level function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#pythran export net((float64[:,:], float64[:], float64[:], float64), int64[:])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="changelog"&gt;
&lt;h2&gt;Changelog&lt;/h2&gt;
&lt;p&gt;So what happened? From the changelog:&lt;/p&gt;
&lt;div class="section" id="honor-pythranrc-environment-variable-for-config-file-lookup"&gt;
&lt;h3&gt;Honor PYTHRANRC environment variable for config file lookup&lt;/h3&gt;
&lt;p&gt;Pythran now honors the &lt;tt class="docutils literal"&gt;PYTHRANRC&lt;/tt&gt; environment variable. You can use it to point to different configuration, say different compiler and/or compiler settings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PYTHRANRC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.pythranrc.gcc&lt;span class="w"&gt; &lt;/span&gt;pythran&lt;span class="w"&gt; &lt;/span&gt;kernel.py

&lt;span class="nv"&gt;PYTHRANRC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.pythranrc.clang&lt;span class="w"&gt; &lt;/span&gt;pythran&lt;span class="w"&gt; &lt;/span&gt;kernel.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="stricter-type-checking-for-export-parameters"&gt;
&lt;h3&gt;Stricter type checking for export parameters&lt;/h3&gt;
&lt;p&gt;Pythran has been supporting function overloading in &lt;tt class="docutils literal"&gt;export&lt;/tt&gt; signature for a long time, but it was confused by the following overloads:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#pythran export foo(float)&lt;/span&gt;
&lt;span class="c1"&gt;#pythran export foo(int)&lt;/span&gt;
&lt;span class="c1"&gt;# which is equivalent to #pythran export foo(int or float) by the way&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because of the implicit conversion that could happen. This releases fixes the issue, and no implicit conversion now happens when checking for overloads. As a consequence, a function flagged as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#pythran export foo(float)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now raises an error when passed an int parameter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="allow-some-kind-of-list-to-tuple-conversion"&gt;
&lt;h3&gt;Allow some kind of list to tuple conversion&lt;/h3&gt;
&lt;p&gt;This one is a tricky one: tuple in Pythran have a fixed size that needs to be known at compile time. On the other hand, lists have a dynamic size, so converting a list to a tuple is a difficult task: the &lt;em&gt;compiler&lt;/em&gt; needs to know the list size at compile time, which may be an unfeasible task, e.g. if the list comes from the Python world.&lt;/p&gt;
&lt;p&gt;Still Pythran now uses an &lt;em&gt;internal&lt;/em&gt; type that acts as a container of read-only elements of the same type, which is an hybrid type between list and tuple and solves &lt;em&gt;some&lt;/em&gt; problems, not all. The following (quite useless) code is now valid:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#pythran export set_of_tuple_generation(int)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_of_tuple_generation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But this one would still fail:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#pythran export array_maker(int)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;array_maker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because Pythran doesn't know the size of &lt;tt class="docutils literal"&gt;l&lt;/tt&gt; so it cannot statically compute the number of dimension of the output array. That's how it is :-/&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lazy-slicing-of-broadcast-expression-and-transposed-expression"&gt;
&lt;h3&gt;Lazy slicing of broadcast expression and transposed expression&lt;/h3&gt;
&lt;p&gt;Numpy is super famous for it's (relatively) intuitive array expression syntax. One of the goal of Pythran -and it's not an easy one- is to be able to efficiently compile these. A small step forward, this kind of expression is now supported, even with more complex slicing patterns:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#pythran export broadcast_and_slice(float[:,:,:], float[:])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;broadcast_and_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's a tricky one because as a result of broadcasting (&lt;cite&gt;x&lt;/cite&gt; and &lt;cite&gt;y&lt;/cite&gt; don't have the same number of dimension) Numpy creates a temporarily large array, and right after it slices it. Pythran can now evaluates this expression lazily and avoid the creation of the intermediate (large) array.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="support-numpy-stack-numpy-rollaxis-numpy-broadcast-to-and-numpy-ndarray-dtype-type"&gt;
&lt;h3&gt;Support &lt;tt class="docutils literal"&gt;numpy.stack&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;numpy.rollaxis&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;numpy.broadcast_to&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;numpy.ndarray.dtype.type&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;Well, the title says it all. The Numpy API is huge but we're moving forward.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="better-support-of-array-of-complex-numbers"&gt;
&lt;h3&gt;Better support of array of complex numbers&lt;/h3&gt;
&lt;p&gt;That's actually big news, Pythran now decently support operations on array of  &lt;tt class="docutils literal"&gt;complex64&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;complex128&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;complex256&lt;/tt&gt; (if the backend compiler supports &lt;tt class="docutils literal"&gt;long double&lt;/tt&gt;) types.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="verbose-mode-in-pythran-config-to-debug-compiler-backend-issues"&gt;
&lt;h3&gt;Verbose mode in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pythran-config&lt;/span&gt;&lt;/tt&gt; to debug compiler backend issues&lt;/h3&gt;
&lt;p&gt;In some cases, knowing about the exact configuration files being loaded by Pythran helps debugging the setup. After all there's the default config file, the one living in your home, or maybe in &lt;tt class="docutils literal"&gt;XDG_CONFIG_HOME&lt;/tt&gt; and the one specified by &lt;tt class="docutils literal"&gt;PYTHRANRC&lt;/tt&gt;. If in doublt, just run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pythran-config&lt;span class="w"&gt; &lt;/span&gt;-v
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And everything should be crystal-clear.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="config-file-linting"&gt;
&lt;h3&gt;Config file linting&lt;/h3&gt;
&lt;p&gt;With that feature, any typo in the config file should now appear, well as a typo and not being silently ignored.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="evaluate-numpy-arange-lazily-when-valid"&gt;
&lt;h3&gt;Evaluate numpy.arange lazily when valid&lt;/h3&gt;
&lt;p&gt;Another optimization some people may appreciate: The pythran compiler can decide to evaluate &lt;tt class="docutils literal"&gt;np.arange&lt;/tt&gt; lazily to avoid the array allocation, as in&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;even_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In that case Pythran only creates the end array, not the temporary one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="faster-prng-namely-pcg"&gt;
&lt;h3&gt;Faster PRNG, namely pcg&lt;/h3&gt;
&lt;p&gt;I know that random numbers are a sloppy ground. Random numbers in Pythran have never strictly respected the semantic of Numpy's PRNG, that is we never produced the same sequence for the same seed. The previous engine was &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;std::mt19937&lt;/span&gt;&lt;/tt&gt; from the STL, it's now &lt;a class="reference external" href="http://www.pcg-random.org/"&gt;PCG&lt;/a&gt;, and there's no guarantee it won't change in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="favor-python3-support-in-various-places"&gt;
&lt;h3&gt;Favor Python3 support in various places&lt;/h3&gt;
&lt;p&gt;Rember the Python3 statement from the beginning of this post?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fix-numpy-remainder-implementation"&gt;
&lt;h3&gt;Fix Numpy.remainder implementation&lt;/h3&gt;
&lt;p&gt;That was a funny one: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;std::remainder&lt;/span&gt;&lt;/tt&gt; from C++ and &lt;tt class="docutils literal"&gt;numpy.remainder&lt;/tt&gt; don't behave the same when dealing with negative numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="better-support-for-importing-user-modules"&gt;
&lt;h3&gt;Better support for importing user modules&lt;/h3&gt;
&lt;p&gt;I'm unsure if this feature is used a lot, but it's possible to import a local
module from a pythranized module, and it's considered as pythranized code then.
Support for that feature was partial, especially with respect to global
variable. The logic has been completely reworked and it should now works fine.&lt;/p&gt;
&lt;p&gt;Note that internally, importing a local module shares &lt;em&gt;some&lt;/em&gt; similarity with the &lt;tt class="docutils literal"&gt;#include&lt;/tt&gt; directive. A direct consequence is that no compiled module are generated for these modules. Their code is bundled withing the final native module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-vectorized-operations-support"&gt;
&lt;h3&gt;More vectorized operations support&lt;/h3&gt;
&lt;p&gt;Pythran's runtime contains calls to &lt;a class="reference external" href="https://github.com/QuantStack/xsimd"&gt;xsimd&lt;/a&gt; for efficient and portable vectorization. It now has a vectorized version of &lt;tt class="docutils literal"&gt;numpy.argmin&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;numpy.argmapx&lt;/tt&gt;, and correctly interacts with operands that would require a type cast (by refusing to vectorize them).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="thanks"&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Numerous people have contributed to that release. I think it's the first time I received that much patches -I'm used to receiving bug reports-. So thanks a bunch to the following usual suspects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pierre Augier&lt;/li&gt;
&lt;li&gt;Yann Diorcet&lt;/li&gt;
&lt;li&gt;Jean Laroche&lt;/li&gt;
&lt;li&gt;Ashwin Vishnu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We've been closing &lt;a class="reference external" href="https://github.com/serge-sans-paille/pythran/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+is%3Aclosed+updated%3A%3E2018-06-01+"&gt;a great deal of bugs&lt;/a&gt;, which also means that the Pythran community is growing, and that's super-cool!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="that-s-all-folks"&gt;
&lt;h2&gt;That's all folks&lt;/h2&gt;
&lt;p&gt;The release is available on&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/serge-sans-paille/pythran/tree/0.9.1"&gt;Github&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pythran/"&gt;PyPI&lt;/a&gt; and&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://anaconda.org/conda-forge/pythran"&gt;Conda&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use Pythran, test it, report bug, submit patch. That's what makes a community lively!&lt;/p&gt;
&lt;/div&gt;
</content><category term="release"></category></entry><entry><title>Pythran 0.7.5 is out!</title><link href="http://serge-sans-paille.github.io/pythran-stories/pythran-075-is-out.html" rel="alternate"></link><published>2016-06-16T00:00:00+02:00</published><updated>2016-06-16T00:00:00+02:00</updated><author><name>serge-sans-paille</name></author><id>tag:serge-sans-paille.github.io,2016-06-16:/pythran-stories/pythran-075-is-out.html</id><summary type="html">&lt;p class="first last"&gt;Pythran version bump, new pypi packages and conda release!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The Pythran team (still 2 active developers) is delighted to
announce the release of Pythran 0.7.5, available on the traditional
channels:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pypi: &lt;a class="reference external" href="https://pypi.python.org/pypi/pythran"&gt;https://pypi.python.org/pypi/pythran&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;conda: &lt;a class="reference external" href="https://anaconda.org/serge-sans-paille/pythran"&gt;https://anaconda.org/serge-sans-paille/pythran&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;github: &lt;a class="reference external" href="https://github.com/serge-sans-paille/pythran"&gt;https://github.com/serge-sans-paille/pythran&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="what-is-it"&gt;
&lt;h2&gt;What is it?&lt;/h2&gt;
&lt;p&gt;Pythran is a static compiler for numerical kernels written in Python + Numpy.
It basically turns Python-compatible modules into native ones,
eventually vectorized and parallelized.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example"&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Following the tradition, each release comes with a code sample. This one
comes from &lt;a class="reference external" href="http://jakevdp.github.io/blog/2012/08/24/numba-vs-cython/"&gt;http://jakevdp.github.io/blog/2012/08/24/numba-vs-cython/&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#pythran export pythran_pairwise(float64 [][])&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pythran_pairwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This kernel relies a lot on Numpy's broadcasting, but Pythran can now
compile it efficiently, which is a really nice improvement! It can rip
(without vectorization and parallelization turned on) more than a x5
speedup over the Numpy version o/&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-infos"&gt;
&lt;h2&gt;More Infos&lt;/h2&gt;
&lt;p&gt;We have published some technical details about Pythran internal on the
blog:&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="http://serge-sans-paille.github.io/pythran-stories/"&gt;http://serge-sans-paille.github.io/pythran-stories/&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;It is open to third-party contribution!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="changelog"&gt;
&lt;h2&gt;Changelog&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Better Jupyter Note book integration&lt;/li&gt;
&lt;li&gt;Numpy Broadcasting support&lt;/li&gt;
&lt;li&gt;Improved value binding analysis&lt;/li&gt;
&lt;li&gt;Simple inlining optimization&lt;/li&gt;
&lt;li&gt;Type engine improvement&lt;/li&gt;
&lt;li&gt;Less fat in the generated modules&lt;/li&gt;
&lt;li&gt;More and better support for various Numpy functions&lt;/li&gt;
&lt;li&gt;Various performance improvement&lt;/li&gt;
&lt;li&gt;Global variable handling, as constants only though&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="acknowledgments"&gt;
&lt;h2&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;Thanks a lot to Pierrick Brunet for his dedicated work, and to all the
bug reporters and patch providers that helped a lot for this release:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/nils-werner"&gt;nils-werner&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/ronbarak"&gt;ronbarak&lt;/a&gt;, &lt;a class="reference external" href="https://twitter.com/fredericoble"&gt;fred oble&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/aguinet"&gt;geekou&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/hainm"&gt;hainm&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/nbecker"&gt;nbecker&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/xantares"&gt;xantares&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="release"></category></entry><entry><title>Pythran 0.7.4 is out!</title><link href="http://serge-sans-paille.github.io/pythran-stories/pythran-074-is-out.html" rel="alternate"></link><published>2016-01-07T00:00:00+01:00</published><updated>2016-01-07T00:00:00+01:00</updated><author><name>serge-sans-paille</name></author><id>tag:serge-sans-paille.github.io,2016-01-07:/pythran-stories/pythran-074-is-out.html</id><summary type="html">&lt;p class="first last"&gt;Pythran version bump, new pypi packages and conda release!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The pythran team (a great total of 2 active developers) is delighted to
announce the release of Pythran 0.7.4, available on the traditional
channels:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pypi: &lt;a class="reference external" href="https://pypi.python.org/pypi/pythran"&gt;https://pypi.python.org/pypi/pythran&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;conda: &lt;a class="reference external" href="https://anaconda.org/serge-sans-paille/pythran"&gt;https://anaconda.org/serge-sans-paille/pythran&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;github: &lt;a class="reference external" href="https://github.com/serge-sans-paille/pythran"&gt;https://github.com/serge-sans-paille/pythran&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;As usual, here is a (new) code sample, once again adapted from a
stackoverflow question &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[0]&lt;/a&gt; that showcases pythran capability:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#pythran export check_mask(bool[][], bool[])&lt;/span&gt;
&lt;span class="c1"&gt;#  ^~~~~~~ non intrusive top-level annotation&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="c1"&gt;#      ^~~~~~ numpy support (partial)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_mask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="c1"&gt;# ^~~~~ type destructuring, array view&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bitwise_and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;# ^~~~~~~ optimization of high level construct&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compiled with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;pythran&lt;span class="w"&gt; &lt;/span&gt;check_mask.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And benchmarked with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;timeit&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;n=10e3 ; import numpy as np;db  = np.array(np.random.randint(2, size=(n, 4)), dtype=bool); out = np.zeros(int(n),dtype=bool); from eq import check_mask&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;check_mask(db, out)&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On average, the CPython version runs in 137 msec while the pythran version run in 450us on my laptop :-)&lt;/p&gt;
&lt;p&gt;Here is an extract of the changelog:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
2016-01-05 Serge Guelton &amp;lt;serge.guelton&amp;#64;telecom-bretagne.eu&amp;gt;

    * IPython's magic for pythran now supports extra compile flags

    * Pythran's C++ output is compatible with Python3 and pythran3 can compile it!

    * More syntax checks (and less template traceback)

    * Improved UI (multiline pythran exports, better setup.py...)

    * Pythonic leaning / bugfixing (this tends to be a permanent item)

    * More generic support for numpy's dtype

    * Simpler install (no more boost.python deps, nor nt2 configuration)

    * Faster compilation (no more boost.python deps, smarter pass manager)

    * Better testing (gcc + clang)
&lt;/pre&gt;
&lt;p&gt;Again, thanks a lot to Pierrick for his continuous top-quality work, and
to the OpenDreamKit &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[1]&lt;/a&gt; project that funded (most of) the recent developments!&lt;/p&gt;
&lt;p&gt;Special thanks to &amp;#64;hainm, &amp;#64;nbecker, &amp;#64;pkoch, &amp;#64;fsteinmetz, &amp;#64;Suor for their
feedbacks. &lt;em&gt;You&lt;/em&gt; give us the motivation to go on!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[0]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/34500913/numba-slower-for-numpy-bitwise-and-on-boolean-arrays"&gt;http://stackoverflow.com/questions/34500913/numba-slower-for-numpy-bitwise-and-on-boolean-arrays&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://opendreamkit.org/"&gt;http://opendreamkit.org/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="release"></category></entry></feed>